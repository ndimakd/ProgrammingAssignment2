q()
e
q()
d
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
d<-tapply(mtcars$mpg, mtcars$cyl, mean)
f<-d["4"]-d["8"]
f
round(f)
mtcars
## This is a pair of functions that cache the inverse of a matrix.It made as
## Coursera home task R-programming week3.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = data.matrix()) {
mt <-NULL
set <- function(x) {
x <<- x
mt <<- NULL
}
get <- function() x
setInv <- function(inv) mt <<- inv
getInv <- function() mt
list(set = set,
get = get,
setInv = setInv,
getInv = getInv)
}
##This function computes the inverse of the special "matrix" returned by
##makeCacheMatrix above. If the inverse has already been calculated (and the
##matrix has not changed), then the cachesolve should retrieve the inverse
##from the cache
cacheSolve <- function(x, ...) {
mt <- x$getInv()
ms <-x$set(x)
mg <-x$get()
if(!is.null(mt)) {
if(identical(mg,ms)){
message("getting cached data")
return(mt) ## Return solved a matrix that is the inverse of 'x'
}
}
data <- x$get()
mt <- solve(data)
x$setInv(mt)
mt ## Return a matrix that is the inverse of 'x'
}
m<-matrix(rnorm(100),10,10)
ms<-makeCacheMatrix(m)
cacheSolve(ms)
ms$get()
ms
m<-matrix(rnorm(100),10,10)
m
ms
ms<-makeCacheMatrix(m)
ms
ms$set()
ms$get()
cacheSolve(ms)
solve(ms)
solve(m)
ms$get()
ms<-makeCacheMatrix(m)
ms$get()
solve(ms$get())
## This is a pair of functions that cache the inverse of a matrix.It made as
## Coursera home task R-programming week3.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = data.matrix()) {
mt <-NULL
set <- function(y) {
x <<- y
mt <<- NULL
}
get <- function() x
setInv <- function(inv) mt <<- inv
getInv <- function() mt
list(set = set,
get = get,
setInv = setInv,
getInv = getInv)
}
##This function computes the inverse of the special "matrix" returned by
##makeCacheMatrix above. If the inverse has already been calculated (and the
##matrix has not changed), then the cachesolve should retrieve the inverse
##from the cache
cacheSolve <- function(x, ...) {
mt <- x$getInv()
ms <-x$set(x)
mg <-x$get()
if(!is.null(mt)) {
if(identical(mg,ms)){
message("getting cached data")
return(mt) ## Return solved a matrix that is the inverse of 'x'
}
}
data <- x$get()
mt <- solve(data)
x$setInv(mt)
mt ## Return a matrix that is the inverse of 'x'
}
m<-matrix(rnorm(100),10,10)
ms<-makeCacheMatrix(m)
cacheSolve(ms)
ms<-makeCacheMatrix(m)
ms$get()
solve(ms$get())
cacheSolve(ms)
ms$get
ms$get()
makeSolve <- function(x = data.matrix()) {
mt <-NULL
set <- function(y) {
x <<- y
mt <<- NULL
}
get <- function() x
setInv <- function(inv) mt <<- inv
getInv <- function() mt
list(set = set,
get = get,
setInv = setInv,
getInv = getInv)
}
cachSolve <- function(x, ...) {
mt <- x$getInv()
ms <-x$set(x)
mg <-x$get()
if(!is.null(mt)) {
if(identical(mg,ms)){
message("getting cached data")
return(mt)
}
}
#  data <- mg
mt <- solve(mg)
x$setInv(mt)
mt
}
m<-matrix(rnorm(100),10,10)
ms<-makeCacheMatrix(m)
cacheSolve(ms)
## This is a pair of functions that cache the inverse of a matrix.It made as
## Coursera home task R-programming week3.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = data.matrix()) {
mt <-NULL
set <- function(y) {
x <<- y
mt <<- NULL
}
get <- function() x
setInv <- function(inv) mt <<- inv
getInv <- function() mt
list(set = set,
get = get,
setInv = setInv,
getInv = getInv)
}
##This function computes the inverse of the special "matrix" returned by
##makeCacheMatrix above. If the inverse has already been calculated (and the
##matrix has not changed), then the cachesolve should retrieve the inverse
##from the cache
cacheSolve <- function(x, ...) {
mt <- x$getInv()
ms <-x$set(x)
mg <-x$get()
if(!is.null(mt)) {
if(identical(mg,ms)){
message("getting cached data")
return(mt) ## Return solved a matrix that is the inverse of 'x'
}
}
data <- x$get()
data
#   mt <- solve(data)
#  x$setInv(mt)
# mt ## Return a matrix that is the inverse of 'x'
}
m<-matrix(rnorm(100),10,10)
ms<-makeCacheMatrix(m)
cacheSolve(ms)
getwd
getwd()
setwd("R-week3")
getwd()
source("cachematrix.R")
m<-matrix(rnorm(100),10,10)
ms<-makeCacheMatrix(m)
cacheSolve(ms)
cacheSolve(ms)
m<-matrix(rnorm(100),10,10)
m<-matrix(rnorm(100),10,10)
ms<-makeCacheMatrix(m)
ms$set()
ms$get()
cacheSolve(ms)
m<-matrix(rnorm(100),10,10)
ms<-makeCacheMatrix(m)
ms$set()
ms$get()
ms$getInv()
ms$setInv()
cacheSolve(ms)
source("cachematrix.R")
m<-matrix(rnorm(100),10,10)
ms<-makeCacheMatrix(m)
cacheSolve(ms)
source("cachematrix.R")
m<-matrix(rnorm(100),10,10)
ms<-makeCacheMatrix(m)
cacheSolve(ms)
